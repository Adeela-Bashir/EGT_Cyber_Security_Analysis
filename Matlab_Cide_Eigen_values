Jacobian of Vector Function
The Jacobian of a vector function is a matrix of the partial derivatives of that function.
Compute the Jacobian matrix with respect to [beta, alpha].
% Define the symbolic variables
syms alpha beta a b c d v w m p n s

% Define the replicator dynamic equations
F_beta = beta * (1 - beta) * (b - d - b*alpha + v*b*alpha + v*w*alpha);
F_alpha = alpha * (1 - alpha) * (-c + a - m*p - a*v*beta - v*n*s*beta + v*m*p*beta);

% Define the system of equations
system = [F_alpha; F_beta];

% Calculate the Jacobian matrix of the system
Jacobian = jacobian(system, [alpha, beta])

% Solve for equilibrium points (alpha, beta)
equilibriumPoints = solve([F_alpha == 0, F_beta == 0], [alpha, beta]);
% Convert equilibrium solutions into a matrix for easier handling
eqPoints = [equilibriumPoints.alpha, equilibriumPoints.beta];

% Display the equilibrium points
disp('Equilibrium Points (Symbolic):')
disp(eqPoints)

% Calculate and display symbolic eigenvalues for each equilibrium point
disp('Symbolic Eigenvalues for each equilibrium point:')

for i = 1:length(eqPoints)
    % Substitute equilibrium point values into the Jacobian matrix
    J_at_eq = subs(Jacobian, {alpha, beta}, {eqPoints(i, 1), eqPoints(i, 2)});
    
    % Calculate the symbolic eigenvalues of the Jacobian matrix at the equilibrium point
    eigenValuesSymbolic = eig(J_at_eq);
    
    % Display the equilibrium point and its corresponding symbolic eigenvalues
    fprintf('For Equilibrium Point (alpha, beta) = (%s, %s):\n', char(eqPoints(i, 1)), char(eqPoints(i, 2)));
    disp('Symbolic Eigenvalues:')
    disp(eigenValuesSymbolic)
end
